@page "/"

@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Scripting.Hosting
@using System.Reflection
@using System.IO
@using System.Threading
@using System.Web

@inject IJSRuntime JSRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject NavigationManager MyNavigationManager


<div class=grid>
    <button class="run btn btn-primary" @onclick="EvaluateAsync">Run</button>
    <div id="editor">@csharp</div>
    <div id="model"></div>
    <div class="output">@((MarkupString)output)</div>
</div>

@code {
    private bool isFirstLoad = true;
    private static string csharp = @"var model = new Model();
var m = BuiltInMaterials.Concrete;
var p = WideFlangeProfileServer.Instance.GetProfileByType(WideFlangeProfileType.W10x100);

for(var i=0; i<10; i++)
{
var start = new Vector3(i, 0, 0);
var end = new Vector3(i,5,i);
var line = new Line(start, end);
var beam = new Beam(line, p, m);
model.AddElement(beam);
}
return model;";
    private string output = "";
    private List<MetadataReference> references;

    protected override async Task OnInitializedAsync()
    {
        // Create instances of model and Console
        // to ensure they're loaded in the app domain.
        var model = new Elements.Model();
        Console.WriteLine("");

        var refs = AppDomain.CurrentDomain.GetAssemblies();
        var client = new HttpClient
        {
            BaseAddress = new Uri(MyNavigationManager.BaseUri)
        };

        var listRefs = new List<MetadataReference>();

        foreach (var reference in refs.Where(x => !x.IsDynamic)) // && !string.IsNullOrWhiteSpace(x.Location)))
        {
            var location = $"_framework/{reference.GetName().Name}.dll";
            var stream = await client.GetStreamAsync(location);
            listRefs.Add(MetadataReference.CreateFromStream(stream));
        }

        references = listRefs;
    }

    private async Task EvaluateAsync(MouseEventArgs args)
    {
        await EvaluateAsync(csharp);
    }

    private async Task EvaluateAsync(string code)
    {
        output = "";
        var previousOut = Console.Out;
        try
        {
            if (TryCompile(code, out var compilation, out var script, out var errorDiagnostics))
            {
                var writer = new StringWriter();
                Console.SetOut(writer);

                var entryPoint = compilation.GetEntryPoint(CancellationToken.None);
                var type = script.GetType($"{entryPoint.ContainingNamespace.MetadataName}.{entryPoint.ContainingType.MetadataName}");
                var entryPointMethod = type.GetMethod(entryPoint.MetadataName);

                var submission = (Func<object[], Task>)entryPointMethod.CreateDelegate(typeof(Func<object[], Task>));
                var returnValue = await ((Task<object>)submission(new object[] { null, null }));

                await Task.Run(() =>
                {
                    var glb = ((Elements.Model)returnValue).ToGlTF();
                    JSUnmarshalledRuntime.InvokeUnmarshalled<byte[], bool>("model.loadModel", glb);
                });

                var evalOutput = HttpUtility.HtmlEncode(writer.ToString());
                if (!string.IsNullOrWhiteSpace(evalOutput))
                {
                    output += $"{evalOutput}";
                }
            }
            else
            {
                foreach (var diag in errorDiagnostics)
                {
                    output += $@"<span class=""error"">{HttpUtility.HtmlEncode(diag)}</span>";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
        finally
        {
            Console.SetOut(previousOut);
        }
    }

    private bool TryCompile(string source, out CSharpCompilation compilation, out Assembly assembly, out
        List<Diagnostic> errorDiagnostics)
    {
        assembly = null;
        compilation = null;

        var scriptCompilation = CSharpCompilation.CreateScriptCompilation(
            Path.GetRandomFileName(),
            CSharpSyntaxTree.ParseText(source,
            CSharpParseOptions.Default.WithKind(SourceCodeKind.Script).WithLanguageVersion(LanguageVersion.Preview)),
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary, usings: new[]
        {
            "System",
            "System.Collections.Generic",
            "System.Console",
            "System.Linq",
            "Elements",
            "Elements.Geometry",
            "Elements.Geometry.Profiles"
        }));

        // TODO: https://github.com/dotnet/runtime/issues/43411
        errorDiagnostics = scriptCompilation.GetDiagnostics().Where(x => x.Severity == DiagnosticSeverity.Error).ToList();
        if (errorDiagnostics.Any())
        {
            return false;
        }

        using (var peStream = new MemoryStream())
        {
            var emitResult = scriptCompilation.Emit(peStream);

            if (emitResult.Success)
            {
                compilation = scriptCompilation;
                assembly = Assembly.Load(peStream.ToArray());
                return true;
            }
        }

        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFirstLoad)
        {
            isFirstLoad = false;
            await JSRuntime.InvokeVoidAsync("model.initializeEditor");
            await JSRuntime.InvokeVoidAsync("model.initialize3D");
        }
    }

    [JSInvokable]
    public static void SetCodeValue(string code)
    {
        csharp = code;
    }
}