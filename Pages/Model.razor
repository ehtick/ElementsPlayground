@page "/model"

@inject IJSRuntime JSRuntime

<h1>Model</h1>

<button class="btn btn-primary" @onclick="CreateModel">Create Model</button>

@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Guid</th>
                <th>Length</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var beam in model.AllElementsOfType<Beam>())
            {
                <tr>
                    <td>@beam.Id</td>
                    <td>@beam.Curve.Length()</td>
                </tr>
            }
        </tbody>
    </table>
}
<div id="model" style="width: 100%; height: 500px;"></div>

@code {
    private Elements.Model model;
    private bool isFirstLoad = true;

    private int increment = 0;

    protected override async Task OnInitializedAsync()
    {
        await CreateModel();
    }

    private async Task CreateModel()
    {
        model = new Elements.Model();
        for (var i = 0; i < 5; i++)
        {
            var beam = new Beam(new Line(new Vector3(i, 0, 0), new Vector3(i, 5 + increment, 5)), Polygon.Rectangle(0.1, 0.1));
            model.AddElement(beam);
        }
        increment++;

        var glb = model.ToBase64String(false);
        await JSRuntime.InvokeVoidAsync("model.loadModel", new[] { glb });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFirstLoad)
        {
            isFirstLoad = false;
            await JSRuntime.InvokeVoidAsync("model.loadScene");

        }
    }
}