@page "/model"

@inject IJSRuntime JSRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime

<h1>Model</h1>

<input type="range" min="-9" max="9" step="1" class="column slider" @bind-value="@value" @bind-value:event="oninput"
    @onchange="OnChange" />
<p>@value</p>

@if (model == null)
{
    <p><em>Loading...</em></p>
}

<div id="model" style="width: 100%; height: 500px;"></div>

@code {
    private Elements.Model model;
    private bool isFirstLoad = true;
    private double value = 0;

    protected override async Task OnInitializedAsync()
    {
        await UpdateModel();
    }

    private async Task UpdateModel()
    {
        var stopwatch = new Stopwatch();

        model = new Elements.Model();
        model.AddElement(BuiltInMaterials.Steel);

        var beamProfile = new Profile(Polygon.Rectangle(0.1, 0.1));

        stopwatch.Start();

        var beams = new List<ElementInstance>();
        var line = new Line(new Vector3(0, 0, 0), new Vector3(0, 5, 0));
        var beam = new Beam(line, beamProfile, isElementDefinition: true);
        model.AddElement(beam);
        
        for (var i = 0; i < 20; i++)
        {
            var instance = beam.CreateInstance(new Transform(i, 0, value), $"beam_{i}");
            beams.Add(instance);
        }
        model.AddElements(beams, false);

        stopwatch.Stop();
        Console.WriteLine($"Elements created in {stopwatch.Elapsed.TotalMilliseconds}ms.");
        stopwatch.Reset();

        // Send the byte array of glb data unmarshalled to the loadModel function.
        await Task.Run(() => {
            stopwatch.Start();
            var glb = model.ToGlTF();
            JSUnmarshalledRuntime.InvokeUnmarshalled<byte[], bool>("model.loadModel", glb);
            stopwatch.Stop();
            Console.WriteLine($"Elements written to stream in {stopwatch.Elapsed.TotalMilliseconds}ms.");
            stopwatch.Reset();
        });
    }

    private async Task OnChange()
    {
        await UpdateModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFirstLoad)
        {
            isFirstLoad = false;
            await JSRuntime.InvokeVoidAsync("model.initialize");
        }
    }
}